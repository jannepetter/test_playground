name: Deploy to production

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy'
        required: true
        type: string
      exists:
        description: 'Image tag already exists in AWS registry?'
        required: true
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      deploy:
        description: 'Deploy the tagged image?'
        required: true
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  REGISTRY: ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ secrets.AWS_REGION}}.amazonaws.com
  AWS_REPO: ${{ secrets.AWS_REPO}}

jobs:
  aws_login_and_update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit SHA for the tag
        run: |
          COMMIT_SHA=$(git rev-list -n 1 ${{ github.event.inputs.tag }})
          echo "The commit SHA for the tag '$TAG_NAME' is: $COMMIT_SHA"
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update images with tags
        if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' && github.event.inputs.exists == 'false'
        run: |
          MANIFEST=$(aws ecr batch-get-image --repository-name ${{ env.AWS_REPO }}/server --image-ids imageTag=${{ env.COMMIT_SHA }} \
           --output text --query 'images[].imageManifest')
          aws ecr put-image --repository-name ${{ env.AWS_REPO }}/server --image-tag ${{ github.event.inputs.tag }} --image-manifest "$MANIFEST" >/dev/null
          echo "Server image tagged successfully."

          MANIFEST=$(aws ecr batch-get-image --repository-name ${{ env.AWS_REPO }}/frontend --image-ids imageTag=${{ env.COMMIT_SHA }} \
           --output text --query 'images[].imageManifest')
          aws ecr put-image --repository-name ${{ env.AWS_REPO }}/frontend --image-tag ${{ github.event.inputs.tag }} --image-manifest "$MANIFEST" >/dev/null
          echo "Frontend image tagged successfully."

  deploy:
    runs-on: ubuntu-latest
    needs: aws_login_and_update
    if: github.event.inputs.deploy == 'true' 
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Download task-defs
        run: |
          aws ecs describe-task-definition --task-definition frontend-task-production --query taskDefinition > frontend-task-definition.json
          aws ecs describe-task-definition --task-definition backend-task-production --query taskDefinition > backend-task-definition.json

      - name: Update backend ECS task definition
        id: task-def-backend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: backend-task-definition.json
          container-name: production-backend
          image: ${{ env.REGISTRY }}/${{ env.AWS_REPO }}/server:${{ github.event.inputs.tag }}
  
      - name: Deploy new backend Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
          service: production-backend-service
          cluster: tpg-production-cluster
  
      - name: Update frontend ECS task definition
        id: task-def-front
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: frontend-task-definition.json
          container-name: production-frontend
          image: ${{ env.REGISTRY }}/${{ env.AWS_REPO }}/frontend:${{ github.event.inputs.tag }}
  
      - name: Deploy new frontend Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-front.outputs.task-definition }}
          service: production-frontend-service
          cluster: tpg-production-cluster